def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent any
    tools {
        maven "Maven3"
        // jdk "OracleJDK8"
    }

    environment {
        SNAP_REPO           = 'spoved-vprofile-snapshot'
        NEXUS_USER          = 'admin'
        NEXUS_PASS          = 'nexus@123'
        RELEASE_REPO        = 'spoved-vprofile-release'
        CENTRAL_REPO        = 'spoved-vprofile-maven-central'
        NEXUSIP             = '172.20.20.20'
        NEXUSPORT           = '8081'
        NEXUS_GRP_REPO      = 'spoved-vprofile-maven-group'
        NEXUS_LOGIN         = 'nexuslogin'
        SONARSERVER         = 'sonarserver'
        SONARSCANNER        = 'sonarscanner'
        // appRegistry         = 'spoved'
        GITHUB_TOKEN        = 'githubtoken'
        GITHUB_REGISTRY     = 'ghcr.io/kanukhosla10/vprofileappimg'
        DOCKER_IMAGE        = 'kanukhosla10/vprofileappimg'

    }

    stages {
        stage('Build') {
            environment {
                JAVA_HOME = '/usr/lib/jvm/java-1.8.0-openjdk-amd64'
            }
            steps {
                sh '''echo "JAVA_HOME is set to: $JAVA_HOME"
                $JAVA_HOME/bin/java -version'''
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh '''echo "JAVA_HOME is set to: $JAVA_HOME"
                $JAVA_HOME/bin/java -version'''
                sh 'mvn -s settings.xml test'
            }
        }

        stage('Checkstyle Analysis - Code Analysis') {
            steps {
                sh '''
                echo "JAVA_HOME is set to: $JAVA_HOME"
                $JAVA_HOME/bin/java -version'''
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
                JAVA_HOME = '/usr/lib/jvm/java-1.17.0-openjdk-amd64'
            }
            steps {
                 withSonarQubeEnv("${SONARSERVER}") {
                    sh '''
                    echo "JAVA_HOME is set to: $JAVA_HOME"
                    $JAVA_HOME/bin/java -version
                    ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=spoved-sq-vprofile \
                   -Dsonar.projectName=spoved-sq-vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                 }
            }
        }

        stage ('Quality Gate') {
            steps{
                timeout(time: 1, unit: 'HOURS') {
                // Parameter to indicate whether to set the pipeline to UNSTABLE
                // true = set UNSTABLE, false = don't
                waitForQualityGate abortPipeline: true
                }

            }
            
        }

        stage('Upload Artiface to Nexus') {
            steps {
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                groupId: 'QA',
                version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                repository: "${RELEASE_REPO}",
                credentialsId: "${NEXUS_LOGIN}",
                artifacts: [
                    [artifactId: 'spoved-vproapp', //prefix for the artifact
                    classifier: '',
                    file: 'target/vprofile-v2.war',
                    type: 'war']
                    ]
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build(env.GITHUB_REGISTRY + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                    }
                }
        }

        stage('Push to GitHub Container Registry') {
            steps {
                script {
                    docker.withRegistry(env.GITHUB_REGISTRY, env.GITHUB_TOKEN) {
                        // Push the Docker image to GitHub Container Registry
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    
    post {
            always {
                echo 'Slack Notifications.'
                slackSend channel: '#ci-build-local',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} Build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
            }
        }
}